#gets its input from a JackTokenizer and emits its parsed structure into an output file/stream

#output is generated by a series of compilexxx() routines, one for every syntactic element xxx of the Jack grammar

#contract between these routines is that each compilexxx() routine should read the syntactic construct xxx from the
#input, advance() the tokenizer exactly beyond xxx, and output the parsing of xxx. Thus, compilexxx() may only be 
#called if indeed xxx is the next syntactic element of the input

#emits a structured printout of the code, wrapped in XML tags, and generates executable VM code

import re
import sys

class CompilationEngine(object):
	
	r_contents = re.compile(r'.*>\s(.*)\s<.*')
	type_contents = re.compile(r'<(.*)>.*<.*>')
	
	classVarDec = ['static', 'field']
	type = ['int', 'char', 'boolean', 'void']
	subroutineDec = ['constructor', 'function', 'method']
	statementType = ['let', 'if', 'while', 'do', 'return']
	op = ['+', '-', '*', '/', '&', '|', '<', '>', '=']
	unaryOp = ['-', '~']
	symbol = ['{', '}', '(', ')', '[', ']', '.', ',', ';', '+', '-', '*',
				'/', '&', '|', '<', '>', '=', '~', '"']
	keywordConstant = ['class', 'var', 'true', 'false', 'null', 'this', 'void']
	
	#creates a new compilation engine with the given input and output
	#the next routine called must be compileClass()
	def __init__(self, infile):
		with open(infile, 'r') as read_file:
			self.lines = read_file.readlines()
		newName = infile.replace('Ttest.xml', '')
		newName += 'test.xml'
		self.curr_line = 1
		self.whitespace = ''
		self.outfile = newName

	#compiles a complete class
	def compileClass(self):
		sys.stdout = open(self.outfile, 'w')
		print("<class>")
		
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #class
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #className
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'{'
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents in self.classVarDec:
			print(self.whitespace+"<classVarDec>")
			self.compileClassVarDec()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</classVarDec>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents in self.subroutineDec:
			print(self.whitespace+"<subroutineDec>")
			self.compileSubroutineDec()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</subroutineDec>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'}'
		
		print("</class>")
	
	#compiles a static declaration or a field declaration
	def compileClassVarDec(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		#while contents == 'static' or contents == 'field':
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #static/field
		self.curr_line += 1
			
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #int/char/boolean/className
		self.curr_line += 1
			
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
		self.curr_line += 1
			
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents == ',':
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #','
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #';'
		self.curr_line += 1
			
	#compiles subroutineDec
	def compileSubroutineDec(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #constructor/function/method
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents in self.keywordConstant:
			print(self.whitespace+"<keyword> "+contents+" </keyword>") #'void'/type
			self.curr_line += 1
		else:
			print(self.whitespace+"<identifier> "+contents+" </identifier>") #'void'/type
			self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #subroutineName
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
		self.curr_line += 1
		
		print(self.whitespace+"<parameterList>")
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents != ')':
			self.compileParameterList()
			self.whitespace = orig_whitespace
		print(self.whitespace+"</parameterList>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
		self.curr_line += 1
		
		print(self.whitespace+"<subroutineBody>")
		self.compileSubroutineBody()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</subroutineBody>")
	
	#compiles a subroutine body
	def compileSubroutineBody(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'{'
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents == 'var':
			print(self.whitespace+"<varDec>")
			self.compileVarDec()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</varDec>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			
		print(self.whitespace+"<statements>")
		self.compileStatements()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</statements>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'}'
		self.curr_line += 1
		
	#compiles a (possibly empty) parameter list, not including the enclosing "()"
	def compileParameterList(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #type
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents == ',':
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #','
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<keyword> "+contents+" </keyword>") #type
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		
	#compiles a var declaration
	def compileVarDec(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #var
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents in self.type:
			print(self.whitespace+"<keyword> "+contents+" </keyword>") #type
		else:
			print(self.whitespace+"<identifier> "+contents+" </identifier>") #type
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents == ',':
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #','
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #';'
		self.curr_line += 1
		
	#compiles a sequence of statements, not including the enclosing "{}"
	def compileStatements(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents in self.statementType:
			if contents == 'let':
				print(self.whitespace+"<letStatement>")
				self.compileLet()
				self.whitespace = orig_whitespace
				print(self.whitespace+"</letStatement>")
			elif contents == 'if':
				print(self.whitespace+"<ifStatement>")
				self.compileIf()
				self.whitespace = orig_whitespace
				print(self.whitespace+"</ifStatement>")
			elif contents == 'while':
				print(self.whitespace+"<whileStatement>")
				self.compileWhile()
				self.whitespace = orig_whitespace
				print(self.whitespace+"</whileStatement>")
			elif contents == 'do':
				print(self.whitespace+"<doStatement>")
				self.compileDo()
				self.whitespace = orig_whitespace
				print(self.whitespace+"</doStatement>")
			elif contents == 'return':
				print(self.whitespace+"<returnStatement>")
				self.compileReturn()
				self.whitespace = orig_whitespace
				print(self.whitespace+"</returnStatement>")
				
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
	
	#compiles a do statement 
	def compileDo(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #do
		self.curr_line += 1
		
		self.compileSubRoutineCall()
		self.whitespace = orig_whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #';'
		self.curr_line += 1
		
	#compiles a let statement
	def compileLet(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #let
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #varName
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents == '[':
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'['
			self.curr_line += 1
			
			print(self.whitespace+"<expression>")
			self.compileExpression()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expression>")
		
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #']'
			self.curr_line += 1
			
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'='
		self.curr_line += 1
		
		print(self.whitespace+"<expression>")
		self.compileExpression()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</expression>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #';'
		self.curr_line += 1

	#compiles a while statement
	def compileWhile(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #while
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
		self.curr_line += 1
		
		print(self.whitespace+"<expression>")
		self.compileExpression()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</expression>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'{'
		self.curr_line += 1
		
		print(self.whitespace+"<statements>")
		self.compileStatements()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</statements>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'}'
		self.curr_line += 1
	
	#compiles an if statement
	def compileIf(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #if
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
		self.curr_line += 1
		
		print(self.whitespace+"<expression>")
		self.compileExpression()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</expression>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'{'
		self.curr_line += 1
		
		print(self.whitespace+"<statements>")
		self.compileStatements()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</statements>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #'}'
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents == 'else':
			print(self.whitespace+"<keyword> "+contents+" </keyword>") #else
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'{'
			self.curr_line += 1
			
			print(self.whitespace+"<statements>")
			self.compileStatements()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</statements>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'}'
			self.curr_line += 1

	#compiles subRoutineCall
	def compileSubRoutineCall(self):
		#self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<identifier> "+contents+" </identifier>") #subroutineName/identifier
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents == '(':
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
			self.curr_line += 1
			
			print(self.whitespace+"<expressionList>")
			self.compileExpressionList()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expressionList>")
				
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
			self.curr_line += 1
		
		else:
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'.'
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<identifier> "+contents+" </identifier>") #'subroutineName'
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
			self.curr_line += 1
			
			print(self.whitespace+"<expressionList>")
			self.compileExpressionList()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expressionList>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
			self.curr_line += 1
		
	#compiles a return statement
	def compileReturn(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<keyword> "+contents+" </keyword>") #return
		self.curr_line += 1
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents != ';':
			print(self.whitespace+"<expression>")
			self.compileExpression()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expression>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		print(self.whitespace+"<symbol> "+contents+" </symbol>") #';'
		self.curr_line += 1
		
	#compiles an expression
	def compileExpression(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		print(self.whitespace+"<term>")
		self.compileTerm()
		self.whitespace = orig_whitespace
		print(self.whitespace+"</term>")
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		while contents in self.op:
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #op
			self.curr_line += 1
			
			print(self.whitespace+"<term>")
			self.compileTerm()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</term>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		
	#compiles a term
	#this routine is faced with a slight difficulty when trying to decide between some of
	#the alternative parsing rules. Specifically, if the current token is an identifier,
	#the routine must distinguish between a variable, an array entry, and a subroutine call
	#a single look-ahead token, which may be one of "[", "(", or "." suffices to distinguish 
	#between the three possibilities
	#any other token is not part of this term and should not be advanced over
	def compileTerm(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		next_tok = self.r_contents.search(self.lines[self.curr_line+1]).group(1)
		type = self.type_contents.search(self.lines[self.curr_line]).group(1)
		
		#print('term type of '+contents+": "+type)
		if type == 'integerConstant':
			print(self.whitespace+"<integerConstant> "+contents+" </integerConstant>")
			self.curr_line += 1
		elif type == 'stringConstant':
			print(self.whitespace+"<stringConstant> "+contents+" </stringConstant>")
			self.curr_line += 1
		elif contents in self.keywordConstant:
			print(self.whitespace+"<keyword> "+contents+" </keyword>")
			self.curr_line += 1
		elif contents == '(':
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
			self.curr_line += 1
			
			print(self.whitespace+"<expression>")
			self.compileExpression()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expression>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
			self.curr_line += 1
			
		elif next_tok == '(' or next_tok == '.':
			self.compileSubRoutineCall()
		elif next_tok == '[' and type == 'identifier':
			print(self.whitespace+"<identifier> "+contents+" </identifier>")
			self.curr_line += 1
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'['
			self.curr_line += 1
			
			print(self.whitespace+"<expression>")
			self.compileExpression()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expression>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #']'
			self.curr_line += 1
		elif contents == '(':
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #'('
			self.curr_line += 1
			
			print(self.whitespace+"<expression>")
			self.compileExpression()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expression>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #')'
			self.curr_line += 1
		elif contents in self.unaryOp:
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			print(self.whitespace+"<symbol> "+contents+" </symbol>") #unaryOp
			self.curr_line += 1
			
			print(self.whitespace+"<term>")
			self.compileTerm()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</term>")
		elif type == 'identifier':
			print(self.whitespace+"<identifier> "+contents+" </identifier>")
			self.curr_line += 1
		else:
			pass
		
	#compiles a (possibly empty) comma-separated list of expressions
	def compileExpressionList(self):
		self.whitespace += '  '
		orig_whitespace = self.whitespace
		
		contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
		if contents != ')':
			print(self.whitespace+"<expression>")
			self.compileExpression()
			self.whitespace = orig_whitespace
			print(self.whitespace+"</expression>")
			
			contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			while contents == ',':
				contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
				print(self.whitespace+"<symbol> "+contents+" </symbol>") #','
				self.curr_line += 1
				
				print(self.whitespace+"<expression>")
				self.compileExpression()
				self.whitespace = orig_whitespace
				print(self.whitespace+"</expression>")
				
				contents = self.r_contents.search(self.lines[self.curr_line]).group(1)
			
def main():
	in_file = ""
	if len(sys.argv) != 2:
		print("Please use: CompilationEngine.py file.xml")
	else:
		in_file = sys.argv[1]
		
	compile = CompilationEngine(in_file)
	compile.compileClass()
main()